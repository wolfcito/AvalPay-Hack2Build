// SPDX-License-Identifier: MIT

/* AUTOGENERATED FILE BY HARDHAT-ZKIT. DO NOT EDIT. */

pragma solidity >=0.7.0 <0.9.0;

contract MintCircuitGroth16Verifier {
    // @dev scalar field size
    uint256 public constant SCALAR_FIELD_SIZE =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;
    /// @dev base field size
    uint256 public constant BASE_FIELD_SIZE =
        21888242871839275222246405745257275088696311157297823662689037894645226208583;

    /// @dev verification key data
    uint256 public constant ALPHA_X =
        20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 public constant ALPHA_Y =
        9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 public constant BETA_X1 =
        4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 public constant BETA_X2 =
        6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 public constant BETA_Y1 =
        21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 public constant BETA_Y2 =
        10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 public constant GAMMA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant GAMMA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant GAMMA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant GAMMA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 public constant DELTA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant DELTA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant DELTA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant DELTA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;

    uint256 public constant IC0_X =
        10121904041541460154551260390411876526139574666949788432677764574044027742051;
    uint256 public constant IC0_Y =
        6395114105467352463516423639828272877440036954754220055848039516989817256674;
    uint256 public constant IC1_X =
        5586762719201810155133862083740714325655748243483738877755810028542797644739;
    uint256 public constant IC1_Y =
        9387879719287370926595730382657598610335084850078203728936667449453246554359;
    uint256 public constant IC2_X =
        19420434315212518030589186167981244595406343548992012458488730749825996100239;
    uint256 public constant IC2_Y =
        3482657374383353276279298693752239555763142972311841530862645391131143881873;
    uint256 public constant IC3_X =
        21667521945257749121492909465236139091096077691835364325355606431375269082282;
    uint256 public constant IC3_Y =
        12156175257782822331801928906256367913221851960540994586932487722549923413345;
    uint256 public constant IC4_X =
        16828357126590671631798447095302651492589140460428270542352941484237941156483;
    uint256 public constant IC4_Y =
        3785759973408012513975276660945174958105045591429994983968533282503371539336;
    uint256 public constant IC5_X =
        21244321325522105477060254124915502034148248502931960755663601081500950076300;
    uint256 public constant IC5_Y =
        14687177467139662957844534389099557537735007475047254307829149459337997284150;
    uint256 public constant IC6_X =
        21404447565616225355770439075122853382066792760583316781611395109968504614761;
    uint256 public constant IC6_Y =
        3777910210505077428584254669424713454396973987622630869249106067166590299357;
    uint256 public constant IC7_X =
        5644690004940482546460856256670502914882531219591199090065888636589494736039;
    uint256 public constant IC7_Y =
        16345970805899097192278870928687506101715169625232631539981164972434652655022;
    uint256 public constant IC8_X =
        16593367704572145491497340027058421406291597779030039134573703992464863830646;
    uint256 public constant IC8_Y =
        19275772679724763916884927502599327291258343548738975909520313332884772129528;
    uint256 public constant IC9_X =
        18338635157990571739660769292280252719367811451620901782236478705200001456515;
    uint256 public constant IC9_Y =
        12580365946981294431067603413481570211192375767222833113101936660967490853342;
    uint256 public constant IC10_X =
        19880773599746588943745194809450382516728304373879942615347513263173728275196;
    uint256 public constant IC10_Y =
        128548754750873577554444615682746852358621588347676854260473817368140033519;
    uint256 public constant IC11_X =
        6476719107464483530164368276818653110527411272303410163053488615734788766586;
    uint256 public constant IC11_Y =
        13331539055996208679678758084320772815107338352425913859433335410845899223811;
    uint256 public constant IC12_X =
        17393436839515851750885277096607160266036302533767007170590322671069079326483;
    uint256 public constant IC12_Y =
        17336491525577930609097646312281682071744277090982994234361498925040239739760;
    uint256 public constant IC13_X =
        14059139663320156276001577403575266145309546640724899667521029234074221180403;
    uint256 public constant IC13_Y =
        5963232262834884334488206091864494084893490405377454589196552297795638041488;
    uint256 public constant IC14_X =
        13813470258321934033051704279698252148783024920181797002453328082368105474789;
    uint256 public constant IC14_Y =
        19760333797981660449134124218356560284106192590380149679255903109561686546313;
    uint256 public constant IC15_X =
        11858117840318587547791069185551586430435948995333725070770764697634898894992;
    uint256 public constant IC15_Y =
        16621799951101200543458233987158204772158254202860685491749532125765298740749;
    uint256 public constant IC16_X =
        13584356250500421508084566767718022822120888453124821650989966819848963029582;
    uint256 public constant IC16_Y =
        21121442557480691564262522113115528175177021588076736568194595390503813944019;
    uint256 public constant IC17_X =
        4326226245481542040767942040881999777137473163343274779447151141265545792486;
    uint256 public constant IC17_Y =
        21183580388477113613358837765893868421637670220571970210021457037640835173809;
    uint256 public constant IC18_X =
        2704745980008452624320271214496436840853635777289985169457654318338905712053;
    uint256 public constant IC18_Y =
        5498942242451865915343845370075402718280213375705928811712272696867696623122;
    uint256 public constant IC19_X =
        18021323881247358977456866382503667963535769536490271165761105041938333860259;
    uint256 public constant IC19_Y =
        15056011404667104875167366478630077579580289596849055349190254216447781136049;
    uint256 public constant IC20_X =
        2428670635260390602473903592482933886252233168437493591205178349351514000281;
    uint256 public constant IC20_Y =
        862350060646299115005420081148519933461348146447694025974629367115211964519;
    uint256 public constant IC21_X =
        20557922324599650576215164022162024912213509843003042307546636524489843547931;
    uint256 public constant IC21_Y =
        1061522392679391742130691544383963509531829000498209937975610885874122363387;
    uint256 public constant IC22_X =
        9114256858842496488535186312068922854228150055952688114444862375910254881995;
    uint256 public constant IC22_Y =
        20868937436899006110617091404782344741103549613810098330797141428653796030423;
    uint256 public constant IC23_X =
        392332888128429361037702708407695212788446855280618226506466973682041689462;
    uint256 public constant IC23_Y =
        10986782868722900357976121669302445297980271976862420955075995610762868745084;
    uint256 public constant IC24_X =
        12335561474727855982123382035622477594232361573497391299243618736725476900631;
    uint256 public constant IC24_Y =
        20340286770637453607265533856091115758478742882346824576410498508028320071146;
    
    /// @dev memory pointer size
    uint256 public constant P_TOTAL_SIZE = 768;

    function verifyProof(
        uint256[2] memory pointA_,
        uint256[2][2] memory pointB_,
        uint256[2] memory pointC_,
        uint256[24] memory publicSignals_
    ) public view returns (bool verified_) {
        assembly {
            function checkField(signal_) -> res_ {
                res_ := lt(signal_, SCALAR_FIELD_SIZE)
            }

            function g1MulAdd(pointer_, x_, y_, s_) -> res_ {
                mstore(add(pointer_, 64), x_)
                mstore(add(pointer_, 96), y_)
                mstore(add(pointer_, 128), s_)

                res_ := staticcall(6000, 7, add(pointer_, 64), 96, add(pointer_, 64), 64) // ecMul
                res_ := and(res_, gt(returndatasize(), 0)) // check that multiplication succeeded

                if iszero(res_) {
                    leave
                }

                res_ := staticcall(150, 6, pointer_, 128, pointer_, 64) // ecAdd
                res_ := and(res_, gt(returndatasize(), 0)) // check that addition succeeded
            }

            function checkPairing(pA_, pB_, pC_, pubSignals_, pointer_) -> res_ {
                mstore(pointer_, IC0_X)
                mstore(add(pointer_, 32), IC0_Y)

                /// @dev compute the linear combination of public signals
                if iszero(g1MulAdd(pointer_, IC1_X, IC1_Y, mload(add(pubSignals_, 0)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC2_X, IC2_Y, mload(add(pubSignals_, 32)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC3_X, IC3_Y, mload(add(pubSignals_, 64)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC4_X, IC4_Y, mload(add(pubSignals_, 96)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC5_X, IC5_Y, mload(add(pubSignals_, 128)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC6_X, IC6_Y, mload(add(pubSignals_, 160)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC7_X, IC7_Y, mload(add(pubSignals_, 192)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC8_X, IC8_Y, mload(add(pubSignals_, 224)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC9_X, IC9_Y, mload(add(pubSignals_, 256)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC10_X, IC10_Y, mload(add(pubSignals_, 288)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC11_X, IC11_Y, mload(add(pubSignals_, 320)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC12_X, IC12_Y, mload(add(pubSignals_, 352)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC13_X, IC13_Y, mload(add(pubSignals_, 384)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC14_X, IC14_Y, mload(add(pubSignals_, 416)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC15_X, IC15_Y, mload(add(pubSignals_, 448)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC16_X, IC16_Y, mload(add(pubSignals_, 480)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC17_X, IC17_Y, mload(add(pubSignals_, 512)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC18_X, IC18_Y, mload(add(pubSignals_, 544)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC19_X, IC19_Y, mload(add(pubSignals_, 576)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC20_X, IC20_Y, mload(add(pubSignals_, 608)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC21_X, IC21_Y, mload(add(pubSignals_, 640)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC22_X, IC22_Y, mload(add(pubSignals_, 672)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC23_X, IC23_Y, mload(add(pubSignals_, 704)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC24_X, IC24_Y, mload(add(pubSignals_, 736)))) {
                    leave
                }
                
                /// @dev gamma2
                mstore(add(pointer_, 64), GAMMA_X1)
                mstore(add(pointer_, 96), GAMMA_X2)
                mstore(add(pointer_, 128), GAMMA_Y1)
                mstore(add(pointer_, 160), GAMMA_Y2)

                /// @dev -A
                mstore(add(pointer_, 192), mload(pA_))
                mstore(
                    add(pointer_, 224),
                    mod(sub(BASE_FIELD_SIZE, mload(add(pA_, 32))), BASE_FIELD_SIZE)
                )

                /// @dev B
                mstore(add(pointer_, 256), mload(mload(pB_)))
                mstore(add(pointer_, 288), mload(add(mload(pB_), 32)))
                mstore(add(pointer_, 320), mload(mload(add(pB_, 32))))
                mstore(add(pointer_, 352), mload(add(mload(add(pB_, 32)), 32)))

                /// @dev alpha1
                mstore(add(pointer_, 384), ALPHA_X)
                mstore(add(pointer_, 416), ALPHA_Y)

                /// @dev beta2
                mstore(add(pointer_, 448), BETA_X1)
                mstore(add(pointer_, 480), BETA_X2)
                mstore(add(pointer_, 512), BETA_Y1)
                mstore(add(pointer_, 544), BETA_Y2)

                /// @dev C
                mstore(add(pointer_, 576), mload(pC_))
                mstore(add(pointer_, 608), mload(add(pC_, 32)))

                /// @dev delta2
                mstore(add(pointer_, 640), DELTA_X1)
                mstore(add(pointer_, 672), DELTA_X2)
                mstore(add(pointer_, 704), DELTA_Y1)
                mstore(add(pointer_, 736), DELTA_Y2)

                res_ := staticcall(181000, 8, pointer_, 768, pointer_, 32) // ecPairing
                res_ := and(res_, mload(pointer_)) // check that pairing succeeded
            }

            let pointer_ := mload(64) // free pointer
            mstore(64, add(pointer_, P_TOTAL_SIZE))

            /// @dev check that all public signals are in F
            verified_ := 1
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 0))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 32))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 64))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 96))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 128))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 160))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 192))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 224))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 256))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 288))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 320))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 352))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 384))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 416))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 448))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 480))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 512))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 544))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 576))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 608))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 640))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 672))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 704))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 736))))
            
            /// @dev check pairings
            if not(iszero(verified_)) {
                verified_ := checkPairing(pointA_, pointB_, pointC_, publicSignals_, pointer_)
            }
        }
    }
}
