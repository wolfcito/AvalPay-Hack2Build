// SPDX-License-Identifier: MIT

/* AUTOGENERATED FILE BY HARDHAT-ZKIT. DO NOT EDIT. */

pragma solidity >=0.7.0 <0.9.0;

contract BurnCircuitGroth16Verifier {
    // @dev scalar field size
    uint256 public constant SCALAR_FIELD_SIZE =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;
    /// @dev base field size
    uint256 public constant BASE_FIELD_SIZE =
        21888242871839275222246405745257275088696311157297823662689037894645226208583;

    /// @dev verification key data
    uint256 public constant ALPHA_X =
        20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 public constant ALPHA_Y =
        9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 public constant BETA_X1 =
        4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 public constant BETA_X2 =
        6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 public constant BETA_Y1 =
        21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 public constant BETA_Y2 =
        10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 public constant GAMMA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant GAMMA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant GAMMA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant GAMMA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 public constant DELTA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant DELTA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant DELTA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant DELTA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;

    uint256 public constant IC0_X =
        6901175356638081608311197414548846861180656487838344346821425826024891512425;
    uint256 public constant IC0_Y =
        16944064565335445729234872967061190126362989003416853826016805426130180238191;
    uint256 public constant IC1_X =
        17908121343774581376092646765067170799970925894057937307165335210962871507135;
    uint256 public constant IC1_Y =
        6739483966006459958647545663755815825611388802168101513616676265213547687212;
    uint256 public constant IC2_X =
        766312427469543414624781412742178740436577019446000599209144238628925292414;
    uint256 public constant IC2_Y =
        11956596380120466965959213032841211036588141256244479446912141909087743946449;
    uint256 public constant IC3_X =
        9834218022277006635455703178457965188100848955744692108208207593466809819916;
    uint256 public constant IC3_Y =
        5985476150835890762503639978680541204908901815001963876083809679448099772187;
    uint256 public constant IC4_X =
        14827234556798753501841602996273223453620286706976793196274886644504394417263;
    uint256 public constant IC4_Y =
        17185284608112950506629319460803937653685676730131697135772583956246683209368;
    uint256 public constant IC5_X =
        17529671244301122497049371127369274616617935801308036584230660946886543200270;
    uint256 public constant IC5_Y =
        21375965875653643781871988041044406562099360028820246922430008152355558076267;
    uint256 public constant IC6_X =
        2071394549783234155236090578090590694025714713435714686283263242515370887037;
    uint256 public constant IC6_Y =
        1360924170815016231172148644602657489538698591468910875031083731851187567999;
    uint256 public constant IC7_X =
        10294779462906061052931321788054691400173934802237652306928745571023248394387;
    uint256 public constant IC7_Y =
        6555248292739776048079409559973894167013450042783785080733702895769749566613;
    uint256 public constant IC8_X =
        4433257889246655161353853222728772973385032114589816543634201923482683435584;
    uint256 public constant IC8_Y =
        14737241692493285661348398748630216205024305186831037514190361703045651615269;
    uint256 public constant IC9_X =
        14662929317288257322870633955431196105372083992377701985085624881517883523163;
    uint256 public constant IC9_Y =
        13045157851276202363238319024416490799176208505845980771766086158756862458455;
    uint256 public constant IC10_X =
        10464607531594481747431773960796216724225398526452385781876076453050117351904;
    uint256 public constant IC10_Y =
        17227459943128246860971844058080372581110192073599679941420162883374908732283;
    uint256 public constant IC11_X =
        745839102907798772556197076666683733791895469218705021459706695701505037999;
    uint256 public constant IC11_Y =
        11282995679713265974084133361652481201591627543141168082075682177048149337453;
    uint256 public constant IC12_X =
        17929575843708091862123276864146152761508698565499701379217956191629740643940;
    uint256 public constant IC12_Y =
        19694868618398715637769102075783868212304717698983166562284533403937378692315;
    uint256 public constant IC13_X =
        19788140654052540486857453303544057569825570368720987020309299320004547960581;
    uint256 public constant IC13_Y =
        6883822212531810402176678585679740471039138816982867861815020183660906571642;
    uint256 public constant IC14_X =
        6016243318855719046735289125777883097005663608233773332990082345142498280371;
    uint256 public constant IC14_Y =
        21204516959587943017810864594613242220785397660490599724380523851223540954454;
    uint256 public constant IC15_X =
        9891573095652303648634434897797773521123041746620991186215470158961116717665;
    uint256 public constant IC15_Y =
        15129361566109667756079905439551006265474721391302786501924664404711249139905;
    uint256 public constant IC16_X =
        9439270817025434198507441583978754692817321436471324362734438362897111301924;
    uint256 public constant IC16_Y =
        17736726489009951896104159456871058989709210357063650885766330312145063724146;
    uint256 public constant IC17_X =
        7287813417026604917333767312326818451716773551965506932628922979658721400484;
    uint256 public constant IC17_Y =
        21190069513632277449640126663995547292551888059992765226941465993312580710136;
    uint256 public constant IC18_X =
        18870427155174730509179857527710685647524233977259143240992234215761896727263;
    uint256 public constant IC18_Y =
        21595208618611453816106702920660402890633778123650117008434425697322727495324;
    uint256 public constant IC19_X =
        2474736367332117814843921180480737874685068379574560055026846626150944220277;
    uint256 public constant IC19_Y =
        11798959751686284671429858411798094190882362783079508053655067482307321072055;
    
    /// @dev memory pointer size
    uint256 public constant P_TOTAL_SIZE = 768;

    function verifyProof(
        uint256[2] memory pointA_,
        uint256[2][2] memory pointB_,
        uint256[2] memory pointC_,
        uint256[19] memory publicSignals_
    ) public view returns (bool verified_) {
        assembly {
            function checkField(signal_) -> res_ {
                res_ := lt(signal_, SCALAR_FIELD_SIZE)
            }

            function g1MulAdd(pointer_, x_, y_, s_) -> res_ {
                mstore(add(pointer_, 64), x_)
                mstore(add(pointer_, 96), y_)
                mstore(add(pointer_, 128), s_)

                res_ := staticcall(6000, 7, add(pointer_, 64), 96, add(pointer_, 64), 64) // ecMul
                res_ := and(res_, gt(returndatasize(), 0)) // check that multiplication succeeded

                if iszero(res_) {
                    leave
                }

                res_ := staticcall(150, 6, pointer_, 128, pointer_, 64) // ecAdd
                res_ := and(res_, gt(returndatasize(), 0)) // check that addition succeeded
            }

            function checkPairing(pA_, pB_, pC_, pubSignals_, pointer_) -> res_ {
                mstore(pointer_, IC0_X)
                mstore(add(pointer_, 32), IC0_Y)

                /// @dev compute the linear combination of public signals
                if iszero(g1MulAdd(pointer_, IC1_X, IC1_Y, mload(add(pubSignals_, 0)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC2_X, IC2_Y, mload(add(pubSignals_, 32)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC3_X, IC3_Y, mload(add(pubSignals_, 64)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC4_X, IC4_Y, mload(add(pubSignals_, 96)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC5_X, IC5_Y, mload(add(pubSignals_, 128)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC6_X, IC6_Y, mload(add(pubSignals_, 160)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC7_X, IC7_Y, mload(add(pubSignals_, 192)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC8_X, IC8_Y, mload(add(pubSignals_, 224)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC9_X, IC9_Y, mload(add(pubSignals_, 256)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC10_X, IC10_Y, mload(add(pubSignals_, 288)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC11_X, IC11_Y, mload(add(pubSignals_, 320)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC12_X, IC12_Y, mload(add(pubSignals_, 352)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC13_X, IC13_Y, mload(add(pubSignals_, 384)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC14_X, IC14_Y, mload(add(pubSignals_, 416)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC15_X, IC15_Y, mload(add(pubSignals_, 448)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC16_X, IC16_Y, mload(add(pubSignals_, 480)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC17_X, IC17_Y, mload(add(pubSignals_, 512)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC18_X, IC18_Y, mload(add(pubSignals_, 544)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC19_X, IC19_Y, mload(add(pubSignals_, 576)))) {
                    leave
                }
                
                /// @dev gamma2
                mstore(add(pointer_, 64), GAMMA_X1)
                mstore(add(pointer_, 96), GAMMA_X2)
                mstore(add(pointer_, 128), GAMMA_Y1)
                mstore(add(pointer_, 160), GAMMA_Y2)

                /// @dev -A
                mstore(add(pointer_, 192), mload(pA_))
                mstore(
                    add(pointer_, 224),
                    mod(sub(BASE_FIELD_SIZE, mload(add(pA_, 32))), BASE_FIELD_SIZE)
                )

                /// @dev B
                mstore(add(pointer_, 256), mload(mload(pB_)))
                mstore(add(pointer_, 288), mload(add(mload(pB_), 32)))
                mstore(add(pointer_, 320), mload(mload(add(pB_, 32))))
                mstore(add(pointer_, 352), mload(add(mload(add(pB_, 32)), 32)))

                /// @dev alpha1
                mstore(add(pointer_, 384), ALPHA_X)
                mstore(add(pointer_, 416), ALPHA_Y)

                /// @dev beta2
                mstore(add(pointer_, 448), BETA_X1)
                mstore(add(pointer_, 480), BETA_X2)
                mstore(add(pointer_, 512), BETA_Y1)
                mstore(add(pointer_, 544), BETA_Y2)

                /// @dev C
                mstore(add(pointer_, 576), mload(pC_))
                mstore(add(pointer_, 608), mload(add(pC_, 32)))

                /// @dev delta2
                mstore(add(pointer_, 640), DELTA_X1)
                mstore(add(pointer_, 672), DELTA_X2)
                mstore(add(pointer_, 704), DELTA_Y1)
                mstore(add(pointer_, 736), DELTA_Y2)

                res_ := staticcall(181000, 8, pointer_, 768, pointer_, 32) // ecPairing
                res_ := and(res_, mload(pointer_)) // check that pairing succeeded
            }

            let pointer_ := mload(64) // free pointer
            mstore(64, add(pointer_, P_TOTAL_SIZE))

            /// @dev check that all public signals are in F
            verified_ := 1
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 0))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 32))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 64))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 96))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 128))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 160))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 192))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 224))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 256))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 288))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 320))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 352))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 384))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 416))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 448))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 480))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 512))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 544))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 576))))
            
            /// @dev check pairings
            if not(iszero(verified_)) {
                verified_ := checkPairing(pointA_, pointB_, pointC_, publicSignals_, pointer_)
            }
        }
    }
}
