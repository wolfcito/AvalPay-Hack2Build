// SPDX-License-Identifier: MIT

/* AUTOGENERATED FILE BY HARDHAT-ZKIT. DO NOT EDIT. */

pragma solidity >=0.7.0 <0.9.0;

contract TransferCircuitGroth16Verifier {
    // @dev scalar field size
    uint256 public constant SCALAR_FIELD_SIZE =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;
    /// @dev base field size
    uint256 public constant BASE_FIELD_SIZE =
        21888242871839275222246405745257275088696311157297823662689037894645226208583;

    /// @dev verification key data
    uint256 public constant ALPHA_X =
        20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 public constant ALPHA_Y =
        9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 public constant BETA_X1 =
        4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 public constant BETA_X2 =
        6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 public constant BETA_Y1 =
        21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 public constant BETA_Y2 =
        10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 public constant GAMMA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant GAMMA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant GAMMA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant GAMMA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 public constant DELTA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant DELTA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant DELTA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant DELTA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;

    uint256 public constant IC0_X =
        11078456175176508947665060839367063181390473473270508006260718733884763446509;
    uint256 public constant IC0_Y =
        6041753414651001127438360352721137264917051499794520184043293475204165190685;
    uint256 public constant IC1_X =
        15162904757480315297547642942646568889101029164132171480256830884259150251283;
    uint256 public constant IC1_Y =
        5543236365374398176471504758808152977042933422387633848583378303299793270756;
    uint256 public constant IC2_X =
        17328060769291355736429270023867089282242463190765930364066672240606322731528;
    uint256 public constant IC2_Y =
        16889028711432227360380575065980535632722375252171627947743748499665179759152;
    uint256 public constant IC3_X =
        8534951274187844857754798765054711469756707542878193818609654720983424682295;
    uint256 public constant IC3_Y =
        8945913628923857906349475216922865350407303486167834270986003060482590360541;
    uint256 public constant IC4_X =
        15451872962493168690150192361017318203301132735619727602712141758148948638807;
    uint256 public constant IC4_Y =
        3257041611034212540028719703800773323519734826811773698850078555263697393038;
    uint256 public constant IC5_X =
        16501527896500369578902237454836690085885521711966021988157538332449691146412;
    uint256 public constant IC5_Y =
        16277901177749764148365216633606366116251292755281475194298759272707407824018;
    uint256 public constant IC6_X =
        10378146563933233933703734244718759999027501367391365750021798315897563444591;
    uint256 public constant IC6_Y =
        6842563751857803307953802478770242999171402515835370020586447923920873099219;
    uint256 public constant IC7_X =
        20352721715392263662971537971767346903027859101481416488967643016592847282380;
    uint256 public constant IC7_Y =
        14260881413352838566197164407396428620727197892843554333450508049100242677628;
    uint256 public constant IC8_X =
        21057739816355151565092401964767622282102551265481668904500681957228063344238;
    uint256 public constant IC8_Y =
        16180780523793713645254963281457716926007937226125045923262954827309238281194;
    uint256 public constant IC9_X =
        14537516127080012005197736574343683034537191970611258246890082854105324760933;
    uint256 public constant IC9_Y =
        18442918359750026099515052740471376065513561505084248781730547784475549682043;
    uint256 public constant IC10_X =
        9945678304537190581884908568330352663212605281307078311554845796978128487311;
    uint256 public constant IC10_Y =
        9922952547073080040816726971142108048165624682232524310828932207260681346925;
    uint256 public constant IC11_X =
        121018551111798889520476374750956766867835537125258291153678626712032749835;
    uint256 public constant IC11_Y =
        29265305386115914605361057732389333018602730942100360415826037370925178043;
    uint256 public constant IC12_X =
        19393638291779014670875425462009705376277440547297152509532737472607672105229;
    uint256 public constant IC12_Y =
        12637387498267415299358604851073087307458804722402979421904536853588103603115;
    uint256 public constant IC13_X =
        19535226022618801566939497106610112373065946755466822996888611481583748235579;
    uint256 public constant IC13_Y =
        18338463551063409694995636016403970595398232669703454914987172540276159653613;
    uint256 public constant IC14_X =
        8008700345935321927788580584227425845966574602899033915258149217767990418718;
    uint256 public constant IC14_Y =
        185856258559502906253092650522696470738095546583256434424552656167093996151;
    uint256 public constant IC15_X =
        7820954574137895573811525844670273368496497357173205474113176992404687726697;
    uint256 public constant IC15_Y =
        956512349033607095044956195378412396626953742914598187567649677456879320228;
    uint256 public constant IC16_X =
        15573333703789237575530866563016649620625650785245004564133502761898657171416;
    uint256 public constant IC16_Y =
        4318045992191734813427473662920467578914718989290966190779465757655054024866;
    uint256 public constant IC17_X =
        14251137277887630388639941167105402370548590355743069148064181443318051385186;
    uint256 public constant IC17_Y =
        3156000259325297871563018277964544792850822239901608666349236165443650945279;
    uint256 public constant IC18_X =
        5872390235919681263129087861488743087046671364741206348090856282223602944462;
    uint256 public constant IC18_Y =
        16668195091836658784208651432085131085595308441293778882239710806888813163568;
    uint256 public constant IC19_X =
        18514753246385905128088201279079181382420042068951125186140903026107781270079;
    uint256 public constant IC19_Y =
        12671409848969278422503585680858897360251449228569325218012677111477592298915;
    uint256 public constant IC20_X =
        14795534685259818800016539466295714973315210330368104927561037919830323460988;
    uint256 public constant IC20_Y =
        2713630188989527621944627278467445252191128824455445277832095608562212679464;
    uint256 public constant IC21_X =
        14146928308724125026725614632454585439232772772913032956834281111360859175326;
    uint256 public constant IC21_Y =
        11696713101615308965286605927940420687716057765241336395590899692577157174575;
    uint256 public constant IC22_X =
        2235128209339941496221360806283506282754206127175685907922436886644178469613;
    uint256 public constant IC22_Y =
        6082007467329063519640234159158138154643669546952627326867255812484441045661;
    uint256 public constant IC23_X =
        4778277300486848528134752164009065478749360605826055092389954662792598494091;
    uint256 public constant IC23_Y =
        3024652709566317167468475499107319235166534387809203994443662489737171429439;
    uint256 public constant IC24_X =
        20553119678962413077240456112807143224561227202753679727141414460261204287602;
    uint256 public constant IC24_Y =
        353033850139697523308575010181001615711175280648155651143918443424069251681;
    uint256 public constant IC25_X =
        12320369853960213401201536713826981257726604458607453897067807791457490307319;
    uint256 public constant IC25_Y =
        12895878247228443034004154694080502857256319561028939353010666652708930585511;
    uint256 public constant IC26_X =
        772255132879173785462217420966153746864602649093557997703481412106975381771;
    uint256 public constant IC26_Y =
        7590818764269556518156184415909156972825437157984074557355089651665498212893;
    uint256 public constant IC27_X =
        15656520006351949412863400564011439085326031727827048952749172502151384928426;
    uint256 public constant IC27_Y =
        9520418046246602777065803395409630022848696572538622647916460498453086071681;
    uint256 public constant IC28_X =
        203389407731559972686963839373673159907560284831081500283956869457261227598;
    uint256 public constant IC28_Y =
        7452820531660814855014532611843194786449585917006722468041952200572306428747;
    uint256 public constant IC29_X =
        1294403555916294449795173178919244618506718557207433405402610910324041999043;
    uint256 public constant IC29_Y =
        3417552333935828954715155980714171844696841479989449134034592386673267645237;
    uint256 public constant IC30_X =
        4057510152773123091521740504550701903278483323514428067579004823698831606746;
    uint256 public constant IC30_Y =
        255222888879429197662829341108999392987181390679120827600125684828907967217;
    uint256 public constant IC31_X =
        16993165161373202096858097803614125959054307247005919250330093739286073007809;
    uint256 public constant IC31_Y =
        1630518864111342581154347255970093862315458024055440432677999240937750277089;
    uint256 public constant IC32_X =
        1342624472930637816128297475680967043884959574033915950794605458813343173455;
    uint256 public constant IC32_Y =
        10644443477057701293111051850964191288457516065268084028669805887784546476470;
    
    /// @dev memory pointer size
    uint256 public constant P_TOTAL_SIZE = 768;

    function verifyProof(
        uint256[2] memory pointA_,
        uint256[2][2] memory pointB_,
        uint256[2] memory pointC_,
        uint256[32] memory publicSignals_
    ) public view returns (bool verified_) {
        assembly {
            function checkField(signal_) -> res_ {
                res_ := lt(signal_, SCALAR_FIELD_SIZE)
            }

            function g1MulAdd(pointer_, x_, y_, s_) -> res_ {
                mstore(add(pointer_, 64), x_)
                mstore(add(pointer_, 96), y_)
                mstore(add(pointer_, 128), s_)

                res_ := staticcall(6000, 7, add(pointer_, 64), 96, add(pointer_, 64), 64) // ecMul
                res_ := and(res_, gt(returndatasize(), 0)) // check that multiplication succeeded

                if iszero(res_) {
                    leave
                }

                res_ := staticcall(150, 6, pointer_, 128, pointer_, 64) // ecAdd
                res_ := and(res_, gt(returndatasize(), 0)) // check that addition succeeded
            }

            function checkPairing(pA_, pB_, pC_, pubSignals_, pointer_) -> res_ {
                mstore(pointer_, IC0_X)
                mstore(add(pointer_, 32), IC0_Y)

                /// @dev compute the linear combination of public signals
                if iszero(g1MulAdd(pointer_, IC1_X, IC1_Y, mload(add(pubSignals_, 0)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC2_X, IC2_Y, mload(add(pubSignals_, 32)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC3_X, IC3_Y, mload(add(pubSignals_, 64)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC4_X, IC4_Y, mload(add(pubSignals_, 96)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC5_X, IC5_Y, mload(add(pubSignals_, 128)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC6_X, IC6_Y, mload(add(pubSignals_, 160)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC7_X, IC7_Y, mload(add(pubSignals_, 192)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC8_X, IC8_Y, mload(add(pubSignals_, 224)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC9_X, IC9_Y, mload(add(pubSignals_, 256)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC10_X, IC10_Y, mload(add(pubSignals_, 288)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC11_X, IC11_Y, mload(add(pubSignals_, 320)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC12_X, IC12_Y, mload(add(pubSignals_, 352)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC13_X, IC13_Y, mload(add(pubSignals_, 384)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC14_X, IC14_Y, mload(add(pubSignals_, 416)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC15_X, IC15_Y, mload(add(pubSignals_, 448)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC16_X, IC16_Y, mload(add(pubSignals_, 480)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC17_X, IC17_Y, mload(add(pubSignals_, 512)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC18_X, IC18_Y, mload(add(pubSignals_, 544)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC19_X, IC19_Y, mload(add(pubSignals_, 576)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC20_X, IC20_Y, mload(add(pubSignals_, 608)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC21_X, IC21_Y, mload(add(pubSignals_, 640)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC22_X, IC22_Y, mload(add(pubSignals_, 672)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC23_X, IC23_Y, mload(add(pubSignals_, 704)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC24_X, IC24_Y, mload(add(pubSignals_, 736)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC25_X, IC25_Y, mload(add(pubSignals_, 768)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC26_X, IC26_Y, mload(add(pubSignals_, 800)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC27_X, IC27_Y, mload(add(pubSignals_, 832)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC28_X, IC28_Y, mload(add(pubSignals_, 864)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC29_X, IC29_Y, mload(add(pubSignals_, 896)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC30_X, IC30_Y, mload(add(pubSignals_, 928)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC31_X, IC31_Y, mload(add(pubSignals_, 960)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC32_X, IC32_Y, mload(add(pubSignals_, 992)))) {
                    leave
                }
                
                /// @dev gamma2
                mstore(add(pointer_, 64), GAMMA_X1)
                mstore(add(pointer_, 96), GAMMA_X2)
                mstore(add(pointer_, 128), GAMMA_Y1)
                mstore(add(pointer_, 160), GAMMA_Y2)

                /// @dev -A
                mstore(add(pointer_, 192), mload(pA_))
                mstore(
                    add(pointer_, 224),
                    mod(sub(BASE_FIELD_SIZE, mload(add(pA_, 32))), BASE_FIELD_SIZE)
                )

                /// @dev B
                mstore(add(pointer_, 256), mload(mload(pB_)))
                mstore(add(pointer_, 288), mload(add(mload(pB_), 32)))
                mstore(add(pointer_, 320), mload(mload(add(pB_, 32))))
                mstore(add(pointer_, 352), mload(add(mload(add(pB_, 32)), 32)))

                /// @dev alpha1
                mstore(add(pointer_, 384), ALPHA_X)
                mstore(add(pointer_, 416), ALPHA_Y)

                /// @dev beta2
                mstore(add(pointer_, 448), BETA_X1)
                mstore(add(pointer_, 480), BETA_X2)
                mstore(add(pointer_, 512), BETA_Y1)
                mstore(add(pointer_, 544), BETA_Y2)

                /// @dev C
                mstore(add(pointer_, 576), mload(pC_))
                mstore(add(pointer_, 608), mload(add(pC_, 32)))

                /// @dev delta2
                mstore(add(pointer_, 640), DELTA_X1)
                mstore(add(pointer_, 672), DELTA_X2)
                mstore(add(pointer_, 704), DELTA_Y1)
                mstore(add(pointer_, 736), DELTA_Y2)

                res_ := staticcall(181000, 8, pointer_, 768, pointer_, 32) // ecPairing
                res_ := and(res_, mload(pointer_)) // check that pairing succeeded
            }

            let pointer_ := mload(64) // free pointer
            mstore(64, add(pointer_, P_TOTAL_SIZE))

            /// @dev check that all public signals are in F
            verified_ := 1
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 0))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 32))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 64))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 96))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 128))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 160))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 192))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 224))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 256))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 288))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 320))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 352))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 384))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 416))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 448))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 480))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 512))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 544))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 576))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 608))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 640))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 672))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 704))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 736))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 768))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 800))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 832))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 864))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 896))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 928))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 960))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 992))))
            
            /// @dev check pairings
            if not(iszero(verified_)) {
                verified_ := checkPairing(pointA_, pointB_, pointC_, publicSignals_, pointer_)
            }
        }
    }
}
